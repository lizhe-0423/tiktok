// Code generated by hertz generator.

package api

import (
	"context"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	basic "github.com/ozline/tiktok/api-gateway/biz/model/message/basic"
	"github.com/ozline/tiktok/api-gateway/rpc"
	"github.com/ozline/tiktok/services/auth/kitex_gen/tiktok/auth"
)

// UserRegister .
// @router /douyin/user/register [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	token, err := rpc.GetToken(context.Background(), &auth.GetTokenRequest{
		Username: req.Username,
		UserId:   123455,
	})

	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
	}

	resp := new(basic.UserRegisterResponse)

	resp.Token = token

	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.UserLoginResponse)

	c.JSON(consts.StatusOK, resp)
}

// UserGetInfo .
// @router /douyin/user [GET]
func UserGetInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.UserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.UserResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoGetFeeds .
// @router /douyin/feed [GET]
func VideoGetFeeds(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.FeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.FeedResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoPublishAction .
// @router /douyin/publish/action [POST]
func VideoPublishAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.PublishActionResponse)

	c.JSON(consts.StatusOK, resp)
}

// VideoPublishList .
// @router /douyin/publish/list [GET]
func VideoPublishList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req basic.PublishListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(basic.PublishListResponse)

	c.JSON(consts.StatusOK, resp)
}
