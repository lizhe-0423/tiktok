// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package video

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *User) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_User[number], err)
}

func (x *User) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.FollowCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FollowerCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *User) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.IsFollow, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Video) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 8:
		offset, err = x.fastReadField8(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Video[number], err)
}

func (x *Video) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v User
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Author = &v
	return offset, nil
}

func (x *Video) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.PlayUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.CoverUrl, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Video) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.FavoriteCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.CommentCount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Video) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	x.IsFavorite, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Video) fastReadField8(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PutVideoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PutVideoRequest[number], err)
}

func (x *PutVideoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfo = &v
	return offset, nil
}

func (x *PutVideoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_PutVideoResponse[number], err)
}

func (x *PutVideoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PutState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *PutVideoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfo = &v
	return offset, nil
}

func (x *PutVideoResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ErrState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteVideoRequest[number], err)
}

func (x *DeleteVideoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.VideoInfo = &v
	return offset, nil
}

func (x *DeleteVideoRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.SelecTion, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DeleteTime, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_DeleteVideoResponse[number], err)
}

func (x *DeleteVideoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.DeleteState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.DeleteFileName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.DeleteUserName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoResponse) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.FileOwnerName, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *DeleteVideoResponse) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.ErrState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetVideoRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoRequest[number], err)
}

func (x *GetVideoRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.FileNumber, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetVideoResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetVideoResponse[number], err)
}

func (x *GetVideoResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.GetState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *GetVideoResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Video
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Videos = append(x.Videos, &v)
	return offset, nil
}

func (x *GetVideoResponse) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ErrState, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *User) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *User) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Id)
	return offset
}

func (x *User) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.Name)
	return offset
}

func (x *User) fastWriteField3(buf []byte) (offset int) {
	if x.FollowCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.FollowCount)
	return offset
}

func (x *User) fastWriteField4(buf []byte) (offset int) {
	if x.FollowerCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.FollowerCount)
	return offset
}

func (x *User) fastWriteField5(buf []byte) (offset int) {
	if !x.IsFollow {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 5, x.IsFollow)
	return offset
}

func (x *Video) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	offset += x.fastWriteField8(buf[offset:])
	return offset
}

func (x *Video) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.Id)
	return offset
}

func (x *Video) fastWriteField2(buf []byte) (offset int) {
	if x.Author == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.Author)
	return offset
}

func (x *Video) fastWriteField3(buf []byte) (offset int) {
	if x.PlayUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.PlayUrl)
	return offset
}

func (x *Video) fastWriteField4(buf []byte) (offset int) {
	if x.CoverUrl == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.CoverUrl)
	return offset
}

func (x *Video) fastWriteField5(buf []byte) (offset int) {
	if x.FavoriteCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 5, x.FavoriteCount)
	return offset
}

func (x *Video) fastWriteField6(buf []byte) (offset int) {
	if x.CommentCount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 6, x.CommentCount)
	return offset
}

func (x *Video) fastWriteField7(buf []byte) (offset int) {
	if !x.IsFavorite {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 7, x.IsFavorite)
	return offset
}

func (x *Video) fastWriteField8(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 8, x.Title)
	return offset
}

func (x *PutVideoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *PutVideoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.VideoInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.VideoInfo)
	return offset
}

func (x *PutVideoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *PutVideoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.PutState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.PutState)
	return offset
}

func (x *PutVideoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.VideoInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.VideoInfo)
	return offset
}

func (x *PutVideoResponse) fastWriteField3(buf []byte) (offset int) {
	if x.ErrState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.ErrState)
	return offset
}

func (x *DeleteVideoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *DeleteVideoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.VideoInfo == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.VideoInfo)
	return offset
}

func (x *DeleteVideoRequest) fastWriteField2(buf []byte) (offset int) {
	if x.SelecTion == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.SelecTion)
	return offset
}

func (x *DeleteVideoRequest) fastWriteField3(buf []byte) (offset int) {
	if x.DeleteTime == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.DeleteTime)
	return offset
}

func (x *DeleteVideoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	return offset
}

func (x *DeleteVideoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.DeleteState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.DeleteState)
	return offset
}

func (x *DeleteVideoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.DeleteFileName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.DeleteFileName)
	return offset
}

func (x *DeleteVideoResponse) fastWriteField3(buf []byte) (offset int) {
	if x.DeleteUserName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.DeleteUserName)
	return offset
}

func (x *DeleteVideoResponse) fastWriteField4(buf []byte) (offset int) {
	if x.FileOwnerName == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.FileOwnerName)
	return offset
}

func (x *DeleteVideoResponse) fastWriteField5(buf []byte) (offset int) {
	if x.ErrState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.ErrState)
	return offset
}

func (x *GetVideoRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetVideoRequest) fastWriteField1(buf []byte) (offset int) {
	if x.FileNumber == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.FileNumber)
	return offset
}

func (x *GetVideoResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *GetVideoResponse) fastWriteField1(buf []byte) (offset int) {
	if x.GetState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetState)
	return offset
}

func (x *GetVideoResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Videos == nil {
		return offset
	}
	for i := range x.Videos {
		offset += fastpb.WriteMessage(buf[offset:], 2, x.Videos[i])
	}
	return offset
}

func (x *GetVideoResponse) fastWriteField3(buf []byte) (offset int) {
	if x.ErrState == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.ErrState)
	return offset
}

func (x *User) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *User) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Id)
	return n
}

func (x *User) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.Name)
	return n
}

func (x *User) sizeField3() (n int) {
	if x.FollowCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.FollowCount)
	return n
}

func (x *User) sizeField4() (n int) {
	if x.FollowerCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.FollowerCount)
	return n
}

func (x *User) sizeField5() (n int) {
	if !x.IsFollow {
		return n
	}
	n += fastpb.SizeBool(5, x.IsFollow)
	return n
}

func (x *Video) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	n += x.sizeField8()
	return n
}

func (x *Video) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.Id)
	return n
}

func (x *Video) sizeField2() (n int) {
	if x.Author == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.Author)
	return n
}

func (x *Video) sizeField3() (n int) {
	if x.PlayUrl == "" {
		return n
	}
	n += fastpb.SizeString(3, x.PlayUrl)
	return n
}

func (x *Video) sizeField4() (n int) {
	if x.CoverUrl == "" {
		return n
	}
	n += fastpb.SizeString(4, x.CoverUrl)
	return n
}

func (x *Video) sizeField5() (n int) {
	if x.FavoriteCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(5, x.FavoriteCount)
	return n
}

func (x *Video) sizeField6() (n int) {
	if x.CommentCount == 0 {
		return n
	}
	n += fastpb.SizeInt64(6, x.CommentCount)
	return n
}

func (x *Video) sizeField7() (n int) {
	if !x.IsFavorite {
		return n
	}
	n += fastpb.SizeBool(7, x.IsFavorite)
	return n
}

func (x *Video) sizeField8() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(8, x.Title)
	return n
}

func (x *PutVideoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *PutVideoRequest) sizeField1() (n int) {
	if x.VideoInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.VideoInfo)
	return n
}

func (x *PutVideoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *PutVideoResponse) sizeField1() (n int) {
	if x.PutState == "" {
		return n
	}
	n += fastpb.SizeString(1, x.PutState)
	return n
}

func (x *PutVideoResponse) sizeField2() (n int) {
	if x.VideoInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.VideoInfo)
	return n
}

func (x *PutVideoResponse) sizeField3() (n int) {
	if x.ErrState == "" {
		return n
	}
	n += fastpb.SizeString(3, x.ErrState)
	return n
}

func (x *DeleteVideoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *DeleteVideoRequest) sizeField1() (n int) {
	if x.VideoInfo == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.VideoInfo)
	return n
}

func (x *DeleteVideoRequest) sizeField2() (n int) {
	if x.SelecTion == "" {
		return n
	}
	n += fastpb.SizeString(2, x.SelecTion)
	return n
}

func (x *DeleteVideoRequest) sizeField3() (n int) {
	if x.DeleteTime == "" {
		return n
	}
	n += fastpb.SizeString(3, x.DeleteTime)
	return n
}

func (x *DeleteVideoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	return n
}

func (x *DeleteVideoResponse) sizeField1() (n int) {
	if x.DeleteState == "" {
		return n
	}
	n += fastpb.SizeString(1, x.DeleteState)
	return n
}

func (x *DeleteVideoResponse) sizeField2() (n int) {
	if x.DeleteFileName == "" {
		return n
	}
	n += fastpb.SizeString(2, x.DeleteFileName)
	return n
}

func (x *DeleteVideoResponse) sizeField3() (n int) {
	if x.DeleteUserName == "" {
		return n
	}
	n += fastpb.SizeString(3, x.DeleteUserName)
	return n
}

func (x *DeleteVideoResponse) sizeField4() (n int) {
	if x.FileOwnerName == "" {
		return n
	}
	n += fastpb.SizeString(4, x.FileOwnerName)
	return n
}

func (x *DeleteVideoResponse) sizeField5() (n int) {
	if x.ErrState == "" {
		return n
	}
	n += fastpb.SizeString(5, x.ErrState)
	return n
}

func (x *GetVideoRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetVideoRequest) sizeField1() (n int) {
	if x.FileNumber == "" {
		return n
	}
	n += fastpb.SizeString(1, x.FileNumber)
	return n
}

func (x *GetVideoResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *GetVideoResponse) sizeField1() (n int) {
	if x.GetState == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetState)
	return n
}

func (x *GetVideoResponse) sizeField2() (n int) {
	if x.Videos == nil {
		return n
	}
	for i := range x.Videos {
		n += fastpb.SizeMessage(2, x.Videos[i])
	}
	return n
}

func (x *GetVideoResponse) sizeField3() (n int) {
	if x.ErrState == "" {
		return n
	}
	n += fastpb.SizeString(3, x.ErrState)
	return n
}

var fieldIDToName_User = map[int32]string{
	1: "Id",
	2: "Name",
	3: "FollowCount",
	4: "FollowerCount",
	5: "IsFollow",
}

var fieldIDToName_Video = map[int32]string{
	1: "Id",
	2: "Author",
	3: "PlayUrl",
	4: "CoverUrl",
	5: "FavoriteCount",
	6: "CommentCount",
	7: "IsFavorite",
	8: "Title",
}

var fieldIDToName_PutVideoRequest = map[int32]string{
	1: "VideoInfo",
}

var fieldIDToName_PutVideoResponse = map[int32]string{
	1: "PutState",
	2: "VideoInfo",
	3: "ErrState",
}

var fieldIDToName_DeleteVideoRequest = map[int32]string{
	1: "VideoInfo",
	2: "SelecTion",
	3: "DeleteTime",
}

var fieldIDToName_DeleteVideoResponse = map[int32]string{
	1: "DeleteState",
	2: "DeleteFileName",
	3: "DeleteUserName",
	4: "FileOwnerName",
	5: "ErrState",
}

var fieldIDToName_GetVideoRequest = map[int32]string{
	1: "FileNumber",
}

var fieldIDToName_GetVideoResponse = map[int32]string{
	1: "GetState",
	2: "Videos",
	3: "ErrState",
}
