// Code generated by Kitex v0.4.4. DO NOT EDIT.

package tiktokauthservice

import (
	"context"
	"fmt"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	auth "github.com/ozline/tiktok/services/auth/kitex_gen/tiktok/auth"
	proto "google.golang.org/protobuf/proto"
)

func serviceInfo() *kitex.ServiceInfo {
	return tiktokAuthServiceServiceInfo
}

var tiktokAuthServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "tiktokAuthService"
	handlerType := (*auth.TiktokAuthService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Ping":       kitex.NewMethodInfo(pingHandler, newPingArgs, newPingResult, false),
		"GetToken":   kitex.NewMethodInfo(getTokenHandler, newGetTokenArgs, newGetTokenResult, false),
		"CheckToken": kitex.NewMethodInfo(checkTokenHandler, newCheckTokenArgs, newCheckTokenResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "auth",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func pingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.PingRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.TiktokAuthService).Ping(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *PingArgs:
		success, err := handler.(auth.TiktokAuthService).Ping(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*PingResult)
		realResult.Success = success
	}
	return nil
}
func newPingArgs() interface{} {
	return &PingArgs{}
}

func newPingResult() interface{} {
	return &PingResult{}
}

type PingArgs struct {
	Req *auth.PingRequest
}

func (p *PingArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.PingRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *PingArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *PingArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *PingArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in PingArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *PingArgs) Unmarshal(in []byte) error {
	msg := new(auth.PingRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var PingArgs_Req_DEFAULT *auth.PingRequest

func (p *PingArgs) GetReq() *auth.PingRequest {
	if !p.IsSetReq() {
		return PingArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *PingArgs) IsSetReq() bool {
	return p.Req != nil
}

type PingResult struct {
	Success *auth.PingResponse
}

var PingResult_Success_DEFAULT *auth.PingResponse

func (p *PingResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.PingResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *PingResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *PingResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *PingResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in PingResult")
	}
	return proto.Marshal(p.Success)
}

func (p *PingResult) Unmarshal(in []byte) error {
	msg := new(auth.PingResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *PingResult) GetSuccess() *auth.PingResponse {
	if !p.IsSetSuccess() {
		return PingResult_Success_DEFAULT
	}
	return p.Success
}

func (p *PingResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.PingResponse)
}

func (p *PingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func getTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.GetTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.TiktokAuthService).GetToken(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *GetTokenArgs:
		success, err := handler.(auth.TiktokAuthService).GetToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetTokenResult)
		realResult.Success = success
	}
	return nil
}
func newGetTokenArgs() interface{} {
	return &GetTokenArgs{}
}

func newGetTokenResult() interface{} {
	return &GetTokenResult{}
}

type GetTokenArgs struct {
	Req *auth.GetTokenRequest
}

func (p *GetTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.GetTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetTokenArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.GetTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetTokenArgs_Req_DEFAULT *auth.GetTokenRequest

func (p *GetTokenArgs) GetReq() *auth.GetTokenRequest {
	if !p.IsSetReq() {
		return GetTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

type GetTokenResult struct {
	Success *auth.GetTokenResponse
}

var GetTokenResult_Success_DEFAULT *auth.GetTokenResponse

func (p *GetTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.GetTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetTokenResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.GetTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetTokenResult) GetSuccess() *auth.GetTokenResponse {
	if !p.IsSetSuccess() {
		return GetTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.GetTokenResponse)
}

func (p *GetTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func checkTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(auth.CheckTokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(auth.TiktokAuthService).CheckToken(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *CheckTokenArgs:
		success, err := handler.(auth.TiktokAuthService).CheckToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*CheckTokenResult)
		realResult.Success = success
	}
	return nil
}
func newCheckTokenArgs() interface{} {
	return &CheckTokenArgs{}
}

func newCheckTokenResult() interface{} {
	return &CheckTokenResult{}
}

type CheckTokenArgs struct {
	Req *auth.CheckTokenRequest
}

func (p *CheckTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(auth.CheckTokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CheckTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CheckTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CheckTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CheckTokenArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CheckTokenArgs) Unmarshal(in []byte) error {
	msg := new(auth.CheckTokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var CheckTokenArgs_Req_DEFAULT *auth.CheckTokenRequest

func (p *CheckTokenArgs) GetReq() *auth.CheckTokenRequest {
	if !p.IsSetReq() {
		return CheckTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CheckTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

type CheckTokenResult struct {
	Success *auth.CheckTokenResponse
}

var CheckTokenResult_Success_DEFAULT *auth.CheckTokenResponse

func (p *CheckTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(auth.CheckTokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CheckTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CheckTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CheckTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CheckTokenResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CheckTokenResult) Unmarshal(in []byte) error {
	msg := new(auth.CheckTokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CheckTokenResult) GetSuccess() *auth.CheckTokenResponse {
	if !p.IsSetSuccess() {
		return CheckTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CheckTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*auth.CheckTokenResponse)
}

func (p *CheckTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Ping(ctx context.Context, Req *auth.PingRequest) (r *auth.PingResponse, err error) {
	var _args PingArgs
	_args.Req = Req
	var _result PingResult
	if err = p.c.Call(ctx, "Ping", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetToken(ctx context.Context, Req *auth.GetTokenRequest) (r *auth.GetTokenResponse, err error) {
	var _args GetTokenArgs
	_args.Req = Req
	var _result GetTokenResult
	if err = p.c.Call(ctx, "GetToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CheckToken(ctx context.Context, Req *auth.CheckTokenRequest) (r *auth.CheckTokenResponse, err error) {
	var _args CheckTokenArgs
	_args.Req = Req
	var _result CheckTokenResult
	if err = p.c.Call(ctx, "CheckToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
